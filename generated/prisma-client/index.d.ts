// Code generated by Prisma (prisma@1.34.6). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  addInfo: (where?: AddInfoWhereInput) => Promise<boolean>;
  address: (where?: AddressWhereInput) => Promise<boolean>;
  cart: (where?: CartWhereInput) => Promise<boolean>;
  cartItem: (where?: CartItemWhereInput) => Promise<boolean>;
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  payment: (where?: PaymentWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  supplier: (where?: SupplierWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  variant: (where?: VariantWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  addInfo: (where: AddInfoWhereUniqueInput) => AddInfoNullablePromise;
  addInfoes: (args?: {
    where?: AddInfoWhereInput;
    orderBy?: AddInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AddInfo>;
  addInfoesConnection: (args?: {
    where?: AddInfoWhereInput;
    orderBy?: AddInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddInfoConnectionPromise;
  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  cart: (where: CartWhereUniqueInput) => CartNullablePromise;
  carts: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cart>;
  cartsConnection: (args?: {
    where?: CartWhereInput;
    orderBy?: CartOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartConnectionPromise;
  cartItem: (where: CartItemWhereUniqueInput) => CartItemNullablePromise;
  cartItems: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CartItem>;
  cartItemsConnection: (args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CartItemConnectionPromise;
  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  payment: (where: PaymentWhereUniqueInput) => PaymentNullablePromise;
  payments: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Payment>;
  paymentsConnection: (args?: {
    where?: PaymentWhereInput;
    orderBy?: PaymentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PaymentConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  supplier: (where: SupplierWhereUniqueInput) => SupplierNullablePromise;
  suppliers: (args?: {
    where?: SupplierWhereInput;
    orderBy?: SupplierOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Supplier>;
  suppliersConnection: (args?: {
    where?: SupplierWhereInput;
    orderBy?: SupplierOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SupplierConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  variant: (where: VariantWhereUniqueInput) => VariantNullablePromise;
  variants: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Variant>;
  variantsConnection: (args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VariantConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddInfo: (data: AddInfoCreateInput) => AddInfoPromise;
  updateAddInfo: (args: {
    data: AddInfoUpdateInput;
    where: AddInfoWhereUniqueInput;
  }) => AddInfoPromise;
  updateManyAddInfoes: (args: {
    data: AddInfoUpdateManyMutationInput;
    where?: AddInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertAddInfo: (args: {
    where: AddInfoWhereUniqueInput;
    create: AddInfoCreateInput;
    update: AddInfoUpdateInput;
  }) => AddInfoPromise;
  deleteAddInfo: (where: AddInfoWhereUniqueInput) => AddInfoPromise;
  deleteManyAddInfoes: (where?: AddInfoWhereInput) => BatchPayloadPromise;
  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createCart: (data: CartCreateInput) => CartPromise;
  updateCart: (args: {
    data: CartUpdateInput;
    where: CartWhereUniqueInput;
  }) => CartPromise;
  upsertCart: (args: {
    where: CartWhereUniqueInput;
    create: CartCreateInput;
    update: CartUpdateInput;
  }) => CartPromise;
  deleteCart: (where: CartWhereUniqueInput) => CartPromise;
  deleteManyCarts: (where?: CartWhereInput) => BatchPayloadPromise;
  createCartItem: (data: CartItemCreateInput) => CartItemPromise;
  updateCartItem: (args: {
    data: CartItemUpdateInput;
    where: CartItemWhereUniqueInput;
  }) => CartItemPromise;
  updateManyCartItems: (args: {
    data: CartItemUpdateManyMutationInput;
    where?: CartItemWhereInput;
  }) => BatchPayloadPromise;
  upsertCartItem: (args: {
    where: CartItemWhereUniqueInput;
    create: CartItemCreateInput;
    update: CartItemUpdateInput;
  }) => CartItemPromise;
  deleteCartItem: (where: CartItemWhereUniqueInput) => CartItemPromise;
  deleteManyCartItems: (where?: CartItemWhereInput) => BatchPayloadPromise;
  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createPayment: (data: PaymentCreateInput) => PaymentPromise;
  updatePayment: (args: {
    data: PaymentUpdateInput;
    where: PaymentWhereUniqueInput;
  }) => PaymentPromise;
  updateManyPayments: (args: {
    data: PaymentUpdateManyMutationInput;
    where?: PaymentWhereInput;
  }) => BatchPayloadPromise;
  upsertPayment: (args: {
    where: PaymentWhereUniqueInput;
    create: PaymentCreateInput;
    update: PaymentUpdateInput;
  }) => PaymentPromise;
  deletePayment: (where: PaymentWhereUniqueInput) => PaymentPromise;
  deleteManyPayments: (where?: PaymentWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createSupplier: (data: SupplierCreateInput) => SupplierPromise;
  updateSupplier: (args: {
    data: SupplierUpdateInput;
    where: SupplierWhereUniqueInput;
  }) => SupplierPromise;
  updateManySuppliers: (args: {
    data: SupplierUpdateManyMutationInput;
    where?: SupplierWhereInput;
  }) => BatchPayloadPromise;
  upsertSupplier: (args: {
    where: SupplierWhereUniqueInput;
    create: SupplierCreateInput;
    update: SupplierUpdateInput;
  }) => SupplierPromise;
  deleteSupplier: (where: SupplierWhereUniqueInput) => SupplierPromise;
  deleteManySuppliers: (where?: SupplierWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVariant: (data: VariantCreateInput) => VariantPromise;
  updateVariant: (args: {
    data: VariantUpdateInput;
    where: VariantWhereUniqueInput;
  }) => VariantPromise;
  updateManyVariants: (args: {
    data: VariantUpdateManyMutationInput;
    where?: VariantWhereInput;
  }) => BatchPayloadPromise;
  upsertVariant: (args: {
    where: VariantWhereUniqueInput;
    create: VariantCreateInput;
    update: VariantUpdateInput;
  }) => VariantPromise;
  deleteVariant: (where: VariantWhereUniqueInput) => VariantPromise;
  deleteManyVariants: (where?: VariantWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  addInfo: (
    where?: AddInfoSubscriptionWhereInput
  ) => AddInfoSubscriptionPayloadSubscription;
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  cart: (
    where?: CartSubscriptionWhereInput
  ) => CartSubscriptionPayloadSubscription;
  cartItem: (
    where?: CartItemSubscriptionWhereInput
  ) => CartItemSubscriptionPayloadSubscription;
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  payment: (
    where?: PaymentSubscriptionWhereInput
  ) => PaymentSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  supplier: (
    where?: SupplierSubscriptionWhereInput
  ) => SupplierSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  variant: (
    where?: VariantSubscriptionWhereInput
  ) => VariantSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "line1_ASC"
  | "line1_DESC"
  | "line2_ASC"
  | "line2_DESC"
  | "district_ASC"
  | "district_DESC"
  | "state_ASC"
  | "state_DESC"
  | "pincode_ASC"
  | "pincode_DESC";

export type CartItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "quantity_ASC"
  | "quantity_DESC";

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "search_ASC"
  | "search_DESC";

export type VariantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC"
  | "pRate_ASC"
  | "pRate_DESC"
  | "taxType_ASC"
  | "taxType_DESC"
  | "stock_ASC"
  | "stock_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "delivered_ASC"
  | "delivered_DESC"
  | "amount_ASC"
  | "amount_DESC"
  | "orderDate_ASC"
  | "orderDate_DESC"
  | "deliverDate_ASC"
  | "deliverDate_DESC"
  | "eta_ASC"
  | "eta_DESC";

export type AddInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nickName_ASC"
  | "nickName_DESC";

export type CartOrderByInput = "id_ASC" | "id_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type PaymentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "modeOfPayment_ASC"
  | "modeOfPayment_DESC"
  | "payed_ASC"
  | "payed_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "imageuri_ASC"
  | "imageuri_DESC"
  | "hsn_ASC"
  | "hsn_DESC";

export type SupplierOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "name_ASC"
  | "name_DESC"
  | "gstin_ASC"
  | "gstin_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  line1?: Maybe<String>;
  line1_not?: Maybe<String>;
  line1_in?: Maybe<String[] | String>;
  line1_not_in?: Maybe<String[] | String>;
  line1_lt?: Maybe<String>;
  line1_lte?: Maybe<String>;
  line1_gt?: Maybe<String>;
  line1_gte?: Maybe<String>;
  line1_contains?: Maybe<String>;
  line1_not_contains?: Maybe<String>;
  line1_starts_with?: Maybe<String>;
  line1_not_starts_with?: Maybe<String>;
  line1_ends_with?: Maybe<String>;
  line1_not_ends_with?: Maybe<String>;
  line2?: Maybe<String>;
  line2_not?: Maybe<String>;
  line2_in?: Maybe<String[] | String>;
  line2_not_in?: Maybe<String[] | String>;
  line2_lt?: Maybe<String>;
  line2_lte?: Maybe<String>;
  line2_gt?: Maybe<String>;
  line2_gte?: Maybe<String>;
  line2_contains?: Maybe<String>;
  line2_not_contains?: Maybe<String>;
  line2_starts_with?: Maybe<String>;
  line2_not_starts_with?: Maybe<String>;
  line2_ends_with?: Maybe<String>;
  line2_not_ends_with?: Maybe<String>;
  district?: Maybe<String>;
  district_not?: Maybe<String>;
  district_in?: Maybe<String[] | String>;
  district_not_in?: Maybe<String[] | String>;
  district_lt?: Maybe<String>;
  district_lte?: Maybe<String>;
  district_gt?: Maybe<String>;
  district_gte?: Maybe<String>;
  district_contains?: Maybe<String>;
  district_not_contains?: Maybe<String>;
  district_starts_with?: Maybe<String>;
  district_not_starts_with?: Maybe<String>;
  district_ends_with?: Maybe<String>;
  district_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  pincode?: Maybe<String>;
  pincode_not?: Maybe<String>;
  pincode_in?: Maybe<String[] | String>;
  pincode_not_in?: Maybe<String[] | String>;
  pincode_lt?: Maybe<String>;
  pincode_lte?: Maybe<String>;
  pincode_gt?: Maybe<String>;
  pincode_gte?: Maybe<String>;
  pincode_contains?: Maybe<String>;
  pincode_not_contains?: Maybe<String>;
  pincode_starts_with?: Maybe<String>;
  pincode_not_starts_with?: Maybe<String>;
  pincode_ends_with?: Maybe<String>;
  pincode_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  addresses_every?: Maybe<AddressWhereInput>;
  addresses_some?: Maybe<AddressWhereInput>;
  addresses_none?: Maybe<AddressWhereInput>;
  cart?: Maybe<CartWhereInput>;
  addnInfo?: Maybe<AddInfoWhereInput>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CartWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  items_every?: Maybe<CartItemWhereInput>;
  items_some?: Maybe<CartItemWhereInput>;
  items_none?: Maybe<CartItemWhereInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<CartWhereInput[] | CartWhereInput>;
  OR?: Maybe<CartWhereInput[] | CartWhereInput>;
  NOT?: Maybe<CartWhereInput[] | CartWhereInput>;
}

export interface CartItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  cart?: Maybe<CartWhereInput>;
  product?: Maybe<ProductWhereInput>;
  variant?: Maybe<VariantWhereInput>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  OR?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
  NOT?: Maybe<CartItemWhereInput[] | CartItemWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  imageuri?: Maybe<String>;
  imageuri_not?: Maybe<String>;
  imageuri_in?: Maybe<String[] | String>;
  imageuri_not_in?: Maybe<String[] | String>;
  imageuri_lt?: Maybe<String>;
  imageuri_lte?: Maybe<String>;
  imageuri_gt?: Maybe<String>;
  imageuri_gte?: Maybe<String>;
  imageuri_contains?: Maybe<String>;
  imageuri_not_contains?: Maybe<String>;
  imageuri_starts_with?: Maybe<String>;
  imageuri_not_starts_with?: Maybe<String>;
  imageuri_ends_with?: Maybe<String>;
  imageuri_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryWhereInput>;
  tags_every?: Maybe<TagWhereInput>;
  tags_some?: Maybe<TagWhereInput>;
  tags_none?: Maybe<TagWhereInput>;
  hsn?: Maybe<String>;
  hsn_not?: Maybe<String>;
  hsn_in?: Maybe<String[] | String>;
  hsn_not_in?: Maybe<String[] | String>;
  hsn_lt?: Maybe<String>;
  hsn_lte?: Maybe<String>;
  hsn_gt?: Maybe<String>;
  hsn_gte?: Maybe<String>;
  hsn_contains?: Maybe<String>;
  hsn_not_contains?: Maybe<String>;
  hsn_starts_with?: Maybe<String>;
  hsn_not_starts_with?: Maybe<String>;
  hsn_ends_with?: Maybe<String>;
  hsn_not_ends_with?: Maybe<String>;
  variants_every?: Maybe<VariantWhereInput>;
  variants_some?: Maybe<VariantWhereInput>;
  variants_none?: Maybe<VariantWhereInput>;
  supplier?: Maybe<SupplierWhereInput>;
  company?: Maybe<CompanyWhereInput>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  search?: Maybe<String>;
  search_not?: Maybe<String>;
  search_in?: Maybe<String[] | String>;
  search_not_in?: Maybe<String[] | String>;
  search_lt?: Maybe<String>;
  search_lte?: Maybe<String>;
  search_gt?: Maybe<String>;
  search_gte?: Maybe<String>;
  search_contains?: Maybe<String>;
  search_not_contains?: Maybe<String>;
  search_starts_with?: Maybe<String>;
  search_not_starts_with?: Maybe<String>;
  search_ends_with?: Maybe<String>;
  search_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface VariantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  pRate?: Maybe<Float>;
  pRate_not?: Maybe<Float>;
  pRate_in?: Maybe<Float[] | Float>;
  pRate_not_in?: Maybe<Float[] | Float>;
  pRate_lt?: Maybe<Float>;
  pRate_lte?: Maybe<Float>;
  pRate_gt?: Maybe<Float>;
  pRate_gte?: Maybe<Float>;
  taxType?: Maybe<Float>;
  taxType_not?: Maybe<Float>;
  taxType_in?: Maybe<Float[] | Float>;
  taxType_not_in?: Maybe<Float[] | Float>;
  taxType_lt?: Maybe<Float>;
  taxType_lte?: Maybe<Float>;
  taxType_gt?: Maybe<Float>;
  taxType_gte?: Maybe<Float>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  product?: Maybe<ProductWhereInput>;
  AND?: Maybe<VariantWhereInput[] | VariantWhereInput>;
  OR?: Maybe<VariantWhereInput[] | VariantWhereInput>;
  NOT?: Maybe<VariantWhereInput[] | VariantWhereInput>;
}

export interface SupplierWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  gstin?: Maybe<String>;
  gstin_not?: Maybe<String>;
  gstin_in?: Maybe<String[] | String>;
  gstin_not_in?: Maybe<String[] | String>;
  gstin_lt?: Maybe<String>;
  gstin_lte?: Maybe<String>;
  gstin_gt?: Maybe<String>;
  gstin_gte?: Maybe<String>;
  gstin_contains?: Maybe<String>;
  gstin_not_contains?: Maybe<String>;
  gstin_starts_with?: Maybe<String>;
  gstin_not_starts_with?: Maybe<String>;
  gstin_ends_with?: Maybe<String>;
  gstin_not_ends_with?: Maybe<String>;
  AND?: Maybe<SupplierWhereInput[] | SupplierWhereInput>;
  OR?: Maybe<SupplierWhereInput[] | SupplierWhereInput>;
  NOT?: Maybe<SupplierWhereInput[] | SupplierWhereInput>;
}

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface AddInfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  nickName?: Maybe<String>;
  nickName_not?: Maybe<String>;
  nickName_in?: Maybe<String[] | String>;
  nickName_not_in?: Maybe<String[] | String>;
  nickName_lt?: Maybe<String>;
  nickName_lte?: Maybe<String>;
  nickName_gt?: Maybe<String>;
  nickName_gte?: Maybe<String>;
  nickName_contains?: Maybe<String>;
  nickName_not_contains?: Maybe<String>;
  nickName_starts_with?: Maybe<String>;
  nickName_not_starts_with?: Maybe<String>;
  nickName_ends_with?: Maybe<String>;
  nickName_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddInfoWhereInput[] | AddInfoWhereInput>;
  OR?: Maybe<AddInfoWhereInput[] | AddInfoWhereInput>;
  NOT?: Maybe<AddInfoWhereInput[] | AddInfoWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  delivered?: Maybe<Boolean>;
  delivered_not?: Maybe<Boolean>;
  items_every?: Maybe<CartItemWhereInput>;
  items_some?: Maybe<CartItemWhereInput>;
  items_none?: Maybe<CartItemWhereInput>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  orderDate_not?: Maybe<DateTimeInput>;
  orderDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  orderDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  orderDate_lt?: Maybe<DateTimeInput>;
  orderDate_lte?: Maybe<DateTimeInput>;
  orderDate_gt?: Maybe<DateTimeInput>;
  orderDate_gte?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  deliverDate_not?: Maybe<DateTimeInput>;
  deliverDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliverDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliverDate_lt?: Maybe<DateTimeInput>;
  deliverDate_lte?: Maybe<DateTimeInput>;
  deliverDate_gt?: Maybe<DateTimeInput>;
  deliverDate_gte?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  eta_not?: Maybe<DateTimeInput>;
  eta_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  eta_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  eta_lt?: Maybe<DateTimeInput>;
  eta_lte?: Maybe<DateTimeInput>;
  eta_gt?: Maybe<DateTimeInput>;
  eta_gte?: Maybe<DateTimeInput>;
  payment?: Maybe<PaymentWhereInput>;
  deliverTo?: Maybe<AddressWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface PaymentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  order?: Maybe<OrderWhereInput>;
  modeOfPayment?: Maybe<String>;
  modeOfPayment_not?: Maybe<String>;
  modeOfPayment_in?: Maybe<String[] | String>;
  modeOfPayment_not_in?: Maybe<String[] | String>;
  modeOfPayment_lt?: Maybe<String>;
  modeOfPayment_lte?: Maybe<String>;
  modeOfPayment_gt?: Maybe<String>;
  modeOfPayment_gte?: Maybe<String>;
  modeOfPayment_contains?: Maybe<String>;
  modeOfPayment_not_contains?: Maybe<String>;
  modeOfPayment_starts_with?: Maybe<String>;
  modeOfPayment_not_starts_with?: Maybe<String>;
  modeOfPayment_ends_with?: Maybe<String>;
  modeOfPayment_not_ends_with?: Maybe<String>;
  payed?: Maybe<Boolean>;
  payed_not?: Maybe<Boolean>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  OR?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
  NOT?: Maybe<PaymentWhereInput[] | PaymentWhereInput>;
}

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CartWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CartItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type PaymentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type SupplierWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VariantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddInfoCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutAddnInfoInput;
  nickName?: Maybe<String>;
}

export interface UserCreateOneWithoutAddnInfoInput {
  create?: Maybe<UserCreateWithoutAddnInfoInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddnInfoInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  cart?: Maybe<CartCreateOneWithoutUserInput>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
}

export interface AddressCreateManyWithoutUserInput {
  create?: Maybe<
    AddressCreateWithoutUserInput[] | AddressCreateWithoutUserInput
  >;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AddressCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  line1: String;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface CartCreateOneWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
}

export interface CartItemCreateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
}

export interface CartItemCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  product: ProductCreateOneInput;
  variant: VariantCreateOneInput;
  quantity?: Maybe<Int>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  imageuri?: Maybe<String>;
  category: CategoryCreateOneInput;
  tags?: Maybe<TagCreateManyInput>;
  hsn?: Maybe<String>;
  variants?: Maybe<VariantCreateManyWithoutProductInput>;
  supplier: SupplierCreateOneInput;
  company: CompanyCreateOneInput;
}

export interface CategoryCreateOneInput {
  create?: Maybe<CategoryCreateInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface TagCreateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  search: String;
}

export interface VariantCreateManyWithoutProductInput {
  create?: Maybe<
    VariantCreateWithoutProductInput[] | VariantCreateWithoutProductInput
  >;
  connect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
}

export interface VariantCreateWithoutProductInput {
  id?: Maybe<ID_Input>;
  name: String;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
}

export interface SupplierCreateOneInput {
  create?: Maybe<SupplierCreateInput>;
  connect?: Maybe<SupplierWhereUniqueInput>;
}

export interface SupplierCreateInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  gstin?: Maybe<String>;
}

export interface CompanyCreateOneInput {
  create?: Maybe<CompanyCreateInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface VariantCreateOneInput {
  create?: Maybe<VariantCreateInput>;
  connect?: Maybe<VariantWhereUniqueInput>;
}

export interface VariantCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
  product?: Maybe<ProductCreateOneWithoutVariantsInput>;
}

export interface ProductCreateOneWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductCreateWithoutVariantsInput {
  id?: Maybe<ID_Input>;
  code: String;
  name: String;
  imageuri?: Maybe<String>;
  category: CategoryCreateOneInput;
  tags?: Maybe<TagCreateManyInput>;
  hsn?: Maybe<String>;
  supplier: SupplierCreateOneInput;
  company: CompanyCreateOneInput;
}

export interface OrderCreateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemCreateManyInput>;
  amount: Int;
  orderDate: DateTimeInput;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  payment: PaymentCreateOneWithoutOrderInput;
  deliverTo: AddressCreateOneInput;
}

export interface CartItemCreateManyInput {
  create?: Maybe<CartItemCreateInput[] | CartItemCreateInput>;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
}

export interface CartItemCreateInput {
  id?: Maybe<ID_Input>;
  cart: CartCreateOneWithoutItemsInput;
  product: ProductCreateOneInput;
  variant: VariantCreateOneInput;
  quantity?: Maybe<Int>;
}

export interface CartCreateOneWithoutItemsInput {
  create?: Maybe<CartCreateWithoutItemsInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCartInput;
}

export interface UserCreateOneWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCartInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  addnInfo?: Maybe<AddInfoCreateOneWithoutUserInput>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
}

export interface AddInfoCreateOneWithoutUserInput {
  create?: Maybe<AddInfoCreateWithoutUserInput>;
  connect?: Maybe<AddInfoWhereUniqueInput>;
}

export interface AddInfoCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  nickName?: Maybe<String>;
}

export interface PaymentCreateOneWithoutOrderInput {
  create?: Maybe<PaymentCreateWithoutOrderInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentCreateWithoutOrderInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  modeOfPayment: String;
  payed?: Maybe<Boolean>;
  amount: Int;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  cart?: Maybe<CartCreateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoCreateOneWithoutUserInput>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
}

export interface AddressCreateOneInput {
  create?: Maybe<AddressCreateInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  line1: String;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
  user?: Maybe<UserCreateOneWithoutAddressesInput>;
}

export interface UserCreateOneWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAddressesInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  cart?: Maybe<CartCreateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoCreateOneWithoutUserInput>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
}

export interface AddInfoUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutAddnInfoInput>;
  nickName?: Maybe<String>;
}

export interface UserUpdateOneRequiredWithoutAddnInfoInput {
  create?: Maybe<UserCreateWithoutAddnInfoInput>;
  update?: Maybe<UserUpdateWithoutAddnInfoDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddnInfoInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAddnInfoDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  cart?: Maybe<CartUpdateOneWithoutUserInput>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface AddressUpdateManyWithoutUserInput {
  create?: Maybe<
    AddressCreateWithoutUserInput[] | AddressCreateWithoutUserInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueWithoutUserInput[]
    | AddressUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueWithoutUserInput[]
    | AddressUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateWithoutUserDataInput;
}

export interface AddressUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  line1?: Maybe<String>;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface AddressUpsertWithWhereUniqueWithoutUserInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateWithoutUserDataInput;
  create: AddressCreateWithoutUserInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  line1?: Maybe<String>;
  line1_not?: Maybe<String>;
  line1_in?: Maybe<String[] | String>;
  line1_not_in?: Maybe<String[] | String>;
  line1_lt?: Maybe<String>;
  line1_lte?: Maybe<String>;
  line1_gt?: Maybe<String>;
  line1_gte?: Maybe<String>;
  line1_contains?: Maybe<String>;
  line1_not_contains?: Maybe<String>;
  line1_starts_with?: Maybe<String>;
  line1_not_starts_with?: Maybe<String>;
  line1_ends_with?: Maybe<String>;
  line1_not_ends_with?: Maybe<String>;
  line2?: Maybe<String>;
  line2_not?: Maybe<String>;
  line2_in?: Maybe<String[] | String>;
  line2_not_in?: Maybe<String[] | String>;
  line2_lt?: Maybe<String>;
  line2_lte?: Maybe<String>;
  line2_gt?: Maybe<String>;
  line2_gte?: Maybe<String>;
  line2_contains?: Maybe<String>;
  line2_not_contains?: Maybe<String>;
  line2_starts_with?: Maybe<String>;
  line2_not_starts_with?: Maybe<String>;
  line2_ends_with?: Maybe<String>;
  line2_not_ends_with?: Maybe<String>;
  district?: Maybe<String>;
  district_not?: Maybe<String>;
  district_in?: Maybe<String[] | String>;
  district_not_in?: Maybe<String[] | String>;
  district_lt?: Maybe<String>;
  district_lte?: Maybe<String>;
  district_gt?: Maybe<String>;
  district_gte?: Maybe<String>;
  district_contains?: Maybe<String>;
  district_not_contains?: Maybe<String>;
  district_starts_with?: Maybe<String>;
  district_not_starts_with?: Maybe<String>;
  district_ends_with?: Maybe<String>;
  district_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  pincode?: Maybe<String>;
  pincode_not?: Maybe<String>;
  pincode_in?: Maybe<String[] | String>;
  pincode_not_in?: Maybe<String[] | String>;
  pincode_lt?: Maybe<String>;
  pincode_lte?: Maybe<String>;
  pincode_gt?: Maybe<String>;
  pincode_gte?: Maybe<String>;
  pincode_contains?: Maybe<String>;
  pincode_not_contains?: Maybe<String>;
  pincode_starts_with?: Maybe<String>;
  pincode_not_starts_with?: Maybe<String>;
  pincode_ends_with?: Maybe<String>;
  pincode_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  name?: Maybe<String>;
  line1?: Maybe<String>;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface CartUpdateOneWithoutUserInput {
  create?: Maybe<CartCreateWithoutUserInput>;
  update?: Maybe<CartUpdateWithoutUserDataInput>;
  upsert?: Maybe<CartUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateWithoutUserDataInput {
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
}

export interface CartItemUpdateManyWithoutCartInput {
  create?: Maybe<
    CartItemCreateWithoutCartInput[] | CartItemCreateWithoutCartInput
  >;
  delete?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  set?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  disconnect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  update?: Maybe<
    | CartItemUpdateWithWhereUniqueWithoutCartInput[]
    | CartItemUpdateWithWhereUniqueWithoutCartInput
  >;
  upsert?: Maybe<
    | CartItemUpsertWithWhereUniqueWithoutCartInput[]
    | CartItemUpsertWithWhereUniqueWithoutCartInput
  >;
  deleteMany?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  updateMany?: Maybe<
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput
  >;
}

export interface CartItemUpdateWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateWithoutCartDataInput;
}

export interface CartItemUpdateWithoutCartDataInput {
  product?: Maybe<ProductUpdateOneRequiredInput>;
  variant?: Maybe<VariantUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  imageuri?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneRequiredInput>;
  tags?: Maybe<TagUpdateManyInput>;
  hsn?: Maybe<String>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  supplier?: Maybe<SupplierUpdateOneRequiredInput>;
  company?: Maybe<CompanyUpdateOneRequiredInput>;
}

export interface CategoryUpdateOneRequiredInput {
  create?: Maybe<CategoryCreateInput>;
  update?: Maybe<CategoryUpdateDataInput>;
  upsert?: Maybe<CategoryUpsertNestedInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface CategoryUpdateDataInput {
  name?: Maybe<String>;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface TagUpdateManyInput {
  create?: Maybe<TagCreateInput[] | TagCreateInput>;
  update?: Maybe<
    TagUpdateWithWhereUniqueNestedInput[] | TagUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    TagUpsertWithWhereUniqueNestedInput[] | TagUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  data: TagUpdateDataInput;
}

export interface TagUpdateDataInput {
  name?: Maybe<String>;
  search?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueNestedInput {
  where: TagWhereUniqueInput;
  update: TagUpdateDataInput;
  create: TagCreateInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  search?: Maybe<String>;
  search_not?: Maybe<String>;
  search_in?: Maybe<String[] | String>;
  search_not_in?: Maybe<String[] | String>;
  search_lt?: Maybe<String>;
  search_lte?: Maybe<String>;
  search_gt?: Maybe<String>;
  search_gte?: Maybe<String>;
  search_contains?: Maybe<String>;
  search_not_contains?: Maybe<String>;
  search_starts_with?: Maybe<String>;
  search_not_starts_with?: Maybe<String>;
  search_ends_with?: Maybe<String>;
  search_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<String>;
  search?: Maybe<String>;
}

export interface VariantUpdateManyWithoutProductInput {
  create?: Maybe<
    VariantCreateWithoutProductInput[] | VariantCreateWithoutProductInput
  >;
  delete?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  connect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  set?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  disconnect?: Maybe<VariantWhereUniqueInput[] | VariantWhereUniqueInput>;
  update?: Maybe<
    | VariantUpdateWithWhereUniqueWithoutProductInput[]
    | VariantUpdateWithWhereUniqueWithoutProductInput
  >;
  upsert?: Maybe<
    | VariantUpsertWithWhereUniqueWithoutProductInput[]
    | VariantUpsertWithWhereUniqueWithoutProductInput
  >;
  deleteMany?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  updateMany?: Maybe<
    | VariantUpdateManyWithWhereNestedInput[]
    | VariantUpdateManyWithWhereNestedInput
  >;
}

export interface VariantUpdateWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput;
  data: VariantUpdateWithoutProductDataInput;
}

export interface VariantUpdateWithoutProductDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
}

export interface VariantUpsertWithWhereUniqueWithoutProductInput {
  where: VariantWhereUniqueInput;
  update: VariantUpdateWithoutProductDataInput;
  create: VariantCreateWithoutProductInput;
}

export interface VariantScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  pRate?: Maybe<Float>;
  pRate_not?: Maybe<Float>;
  pRate_in?: Maybe<Float[] | Float>;
  pRate_not_in?: Maybe<Float[] | Float>;
  pRate_lt?: Maybe<Float>;
  pRate_lte?: Maybe<Float>;
  pRate_gt?: Maybe<Float>;
  pRate_gte?: Maybe<Float>;
  taxType?: Maybe<Float>;
  taxType_not?: Maybe<Float>;
  taxType_in?: Maybe<Float[] | Float>;
  taxType_not_in?: Maybe<Float[] | Float>;
  taxType_lt?: Maybe<Float>;
  taxType_lte?: Maybe<Float>;
  taxType_gt?: Maybe<Float>;
  taxType_gte?: Maybe<Float>;
  stock?: Maybe<Int>;
  stock_not?: Maybe<Int>;
  stock_in?: Maybe<Int[] | Int>;
  stock_not_in?: Maybe<Int[] | Int>;
  stock_lt?: Maybe<Int>;
  stock_lte?: Maybe<Int>;
  stock_gt?: Maybe<Int>;
  stock_gte?: Maybe<Int>;
  AND?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  OR?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
  NOT?: Maybe<VariantScalarWhereInput[] | VariantScalarWhereInput>;
}

export interface VariantUpdateManyWithWhereNestedInput {
  where: VariantScalarWhereInput;
  data: VariantUpdateManyDataInput;
}

export interface VariantUpdateManyDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
}

export interface SupplierUpdateOneRequiredInput {
  create?: Maybe<SupplierCreateInput>;
  update?: Maybe<SupplierUpdateDataInput>;
  upsert?: Maybe<SupplierUpsertNestedInput>;
  connect?: Maybe<SupplierWhereUniqueInput>;
}

export interface SupplierUpdateDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  gstin?: Maybe<String>;
}

export interface SupplierUpsertNestedInput {
  update: SupplierUpdateDataInput;
  create: SupplierCreateInput;
}

export interface CompanyUpdateOneRequiredInput {
  create?: Maybe<CompanyCreateInput>;
  update?: Maybe<CompanyUpdateDataInput>;
  upsert?: Maybe<CompanyUpsertNestedInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateDataInput {
  name?: Maybe<String>;
}

export interface CompanyUpsertNestedInput {
  update: CompanyUpdateDataInput;
  create: CompanyCreateInput;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface VariantUpdateOneRequiredInput {
  create?: Maybe<VariantCreateInput>;
  update?: Maybe<VariantUpdateDataInput>;
  upsert?: Maybe<VariantUpsertNestedInput>;
  connect?: Maybe<VariantWhereUniqueInput>;
}

export interface VariantUpdateDataInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
  product?: Maybe<ProductUpdateOneWithoutVariantsInput>;
}

export interface ProductUpdateOneWithoutVariantsInput {
  create?: Maybe<ProductCreateWithoutVariantsInput>;
  update?: Maybe<ProductUpdateWithoutVariantsDataInput>;
  upsert?: Maybe<ProductUpsertWithoutVariantsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface ProductUpdateWithoutVariantsDataInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  imageuri?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneRequiredInput>;
  tags?: Maybe<TagUpdateManyInput>;
  hsn?: Maybe<String>;
  supplier?: Maybe<SupplierUpdateOneRequiredInput>;
  company?: Maybe<CompanyUpdateOneRequiredInput>;
}

export interface ProductUpsertWithoutVariantsInput {
  update: ProductUpdateWithoutVariantsDataInput;
  create: ProductCreateWithoutVariantsInput;
}

export interface VariantUpsertNestedInput {
  update: VariantUpdateDataInput;
  create: VariantCreateInput;
}

export interface CartItemUpsertWithWhereUniqueWithoutCartInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateWithoutCartDataInput;
  create: CartItemCreateWithoutCartInput;
}

export interface CartItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  quantity?: Maybe<Int>;
  quantity_not?: Maybe<Int>;
  quantity_in?: Maybe<Int[] | Int>;
  quantity_not_in?: Maybe<Int[] | Int>;
  quantity_lt?: Maybe<Int>;
  quantity_lte?: Maybe<Int>;
  quantity_gt?: Maybe<Int>;
  quantity_gte?: Maybe<Int>;
  AND?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  OR?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  NOT?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
}

export interface CartItemUpdateManyWithWhereNestedInput {
  where: CartItemScalarWhereInput;
  data: CartItemUpdateManyDataInput;
}

export interface CartItemUpdateManyDataInput {
  quantity?: Maybe<Int>;
}

export interface CartUpsertWithoutUserInput {
  update: CartUpdateWithoutUserDataInput;
  create: CartCreateWithoutUserInput;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface OrderUpdateWithoutUserDataInput {
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemUpdateManyInput>;
  amount?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  payment?: Maybe<PaymentUpdateOneRequiredWithoutOrderInput>;
  deliverTo?: Maybe<AddressUpdateOneRequiredInput>;
}

export interface CartItemUpdateManyInput {
  create?: Maybe<CartItemCreateInput[] | CartItemCreateInput>;
  update?: Maybe<
    | CartItemUpdateWithWhereUniqueNestedInput[]
    | CartItemUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | CartItemUpsertWithWhereUniqueNestedInput[]
    | CartItemUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  connect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  set?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  disconnect?: Maybe<CartItemWhereUniqueInput[] | CartItemWhereUniqueInput>;
  deleteMany?: Maybe<CartItemScalarWhereInput[] | CartItemScalarWhereInput>;
  updateMany?: Maybe<
    | CartItemUpdateManyWithWhereNestedInput[]
    | CartItemUpdateManyWithWhereNestedInput
  >;
}

export interface CartItemUpdateWithWhereUniqueNestedInput {
  where: CartItemWhereUniqueInput;
  data: CartItemUpdateDataInput;
}

export interface CartItemUpdateDataInput {
  cart?: Maybe<CartUpdateOneRequiredWithoutItemsInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  variant?: Maybe<VariantUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
}

export interface CartUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<CartCreateWithoutItemsInput>;
  update?: Maybe<CartUpdateWithoutItemsDataInput>;
  upsert?: Maybe<CartUpsertWithoutItemsInput>;
  connect?: Maybe<CartWhereUniqueInput>;
}

export interface CartUpdateWithoutItemsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
}

export interface UserUpdateOneRequiredWithoutCartInput {
  create?: Maybe<UserCreateWithoutCartInput>;
  update?: Maybe<UserUpdateWithoutCartDataInput>;
  upsert?: Maybe<UserUpsertWithoutCartInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCartDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  addnInfo?: Maybe<AddInfoUpdateOneWithoutUserInput>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface AddInfoUpdateOneWithoutUserInput {
  create?: Maybe<AddInfoCreateWithoutUserInput>;
  update?: Maybe<AddInfoUpdateWithoutUserDataInput>;
  upsert?: Maybe<AddInfoUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AddInfoWhereUniqueInput>;
}

export interface AddInfoUpdateWithoutUserDataInput {
  nickName?: Maybe<String>;
}

export interface AddInfoUpsertWithoutUserInput {
  update: AddInfoUpdateWithoutUserDataInput;
  create: AddInfoCreateWithoutUserInput;
}

export interface UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput;
  create: UserCreateWithoutCartInput;
}

export interface CartUpsertWithoutItemsInput {
  update: CartUpdateWithoutItemsDataInput;
  create: CartCreateWithoutItemsInput;
}

export interface CartItemUpsertWithWhereUniqueNestedInput {
  where: CartItemWhereUniqueInput;
  update: CartItemUpdateDataInput;
  create: CartItemCreateInput;
}

export interface PaymentUpdateOneRequiredWithoutOrderInput {
  create?: Maybe<PaymentCreateWithoutOrderInput>;
  update?: Maybe<PaymentUpdateWithoutOrderDataInput>;
  upsert?: Maybe<PaymentUpsertWithoutOrderInput>;
  connect?: Maybe<PaymentWhereUniqueInput>;
}

export interface PaymentUpdateWithoutOrderDataInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  modeOfPayment?: Maybe<String>;
  payed?: Maybe<Boolean>;
  amount?: Maybe<Int>;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  cart?: Maybe<CartUpdateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoUpdateOneWithoutUserInput>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface PaymentUpsertWithoutOrderInput {
  update: PaymentUpdateWithoutOrderDataInput;
  create: PaymentCreateWithoutOrderInput;
}

export interface AddressUpdateOneRequiredInput {
  create?: Maybe<AddressCreateInput>;
  update?: Maybe<AddressUpdateDataInput>;
  upsert?: Maybe<AddressUpsertNestedInput>;
  connect?: Maybe<AddressWhereUniqueInput>;
}

export interface AddressUpdateDataInput {
  name?: Maybe<String>;
  line1?: Maybe<String>;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutAddressesInput>;
}

export interface UserUpdateOneWithoutAddressesInput {
  create?: Maybe<UserCreateWithoutAddressesInput>;
  update?: Maybe<UserUpdateWithoutAddressesDataInput>;
  upsert?: Maybe<UserUpsertWithoutAddressesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAddressesDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  cart?: Maybe<CartUpdateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoUpdateOneWithoutUserInput>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutAddressesInput {
  update: UserUpdateWithoutAddressesDataInput;
  create: UserCreateWithoutAddressesInput;
}

export interface AddressUpsertNestedInput {
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  delivered?: Maybe<Boolean>;
  delivered_not?: Maybe<Boolean>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  orderDate_not?: Maybe<DateTimeInput>;
  orderDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  orderDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  orderDate_lt?: Maybe<DateTimeInput>;
  orderDate_lte?: Maybe<DateTimeInput>;
  orderDate_gt?: Maybe<DateTimeInput>;
  orderDate_gte?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  deliverDate_not?: Maybe<DateTimeInput>;
  deliverDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliverDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  deliverDate_lt?: Maybe<DateTimeInput>;
  deliverDate_lte?: Maybe<DateTimeInput>;
  deliverDate_gt?: Maybe<DateTimeInput>;
  deliverDate_gte?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  eta_not?: Maybe<DateTimeInput>;
  eta_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  eta_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  eta_lt?: Maybe<DateTimeInput>;
  eta_lte?: Maybe<DateTimeInput>;
  eta_gt?: Maybe<DateTimeInput>;
  eta_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  delivered?: Maybe<Boolean>;
  amount?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
}

export interface UserUpsertWithoutAddnInfoInput {
  update: UserUpdateWithoutAddnInfoDataInput;
  create: UserCreateWithoutAddnInfoInput;
}

export interface AddInfoUpdateManyMutationInput {
  nickName?: Maybe<String>;
}

export interface AddressUpdateInput {
  name?: Maybe<String>;
  line1?: Maybe<String>;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutAddressesInput>;
}

export interface AddressUpdateManyMutationInput {
  name?: Maybe<String>;
  line1?: Maybe<String>;
  line2?: Maybe<String>;
  district?: Maybe<String>;
  state?: Maybe<String>;
  pincode?: Maybe<String>;
}

export interface CartCreateInput {
  id?: Maybe<ID_Input>;
  items?: Maybe<CartItemCreateManyWithoutCartInput>;
  user: UserCreateOneWithoutCartInput;
}

export interface CartUpdateInput {
  items?: Maybe<CartItemUpdateManyWithoutCartInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutCartInput>;
}

export interface CartItemUpdateInput {
  cart?: Maybe<CartUpdateOneRequiredWithoutItemsInput>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  variant?: Maybe<VariantUpdateOneRequiredInput>;
  quantity?: Maybe<Int>;
}

export interface CartItemUpdateManyMutationInput {
  quantity?: Maybe<Int>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
}

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CompanyUpdateInput {
  name?: Maybe<String>;
}

export interface CompanyUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutOrdersInput;
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemCreateManyInput>;
  amount: Int;
  orderDate: DateTimeInput;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  payment: PaymentCreateOneWithoutOrderInput;
  deliverTo: AddressCreateOneInput;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrdersInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  addresses?: Maybe<AddressCreateManyWithoutUserInput>;
  cart?: Maybe<CartCreateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoCreateOneWithoutUserInput>;
}

export interface OrderUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemUpdateManyInput>;
  amount?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  payment?: Maybe<PaymentUpdateOneRequiredWithoutOrderInput>;
  deliverTo?: Maybe<AddressUpdateOneRequiredInput>;
}

export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  update?: Maybe<UserUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrdersDataInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  cart?: Maybe<CartUpdateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoUpdateOneWithoutUserInput>;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  delivered?: Maybe<Boolean>;
  amount?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
}

export interface PaymentCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  order: OrderCreateOneWithoutPaymentInput;
  modeOfPayment: String;
  payed?: Maybe<Boolean>;
  amount: Int;
}

export interface OrderCreateOneWithoutPaymentInput {
  create?: Maybe<OrderCreateWithoutPaymentInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutPaymentInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutOrdersInput;
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemCreateManyInput>;
  amount: Int;
  orderDate: DateTimeInput;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  deliverTo: AddressCreateOneInput;
}

export interface PaymentUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  order?: Maybe<OrderUpdateOneRequiredWithoutPaymentInput>;
  modeOfPayment?: Maybe<String>;
  payed?: Maybe<Boolean>;
  amount?: Maybe<Int>;
}

export interface OrderUpdateOneRequiredWithoutPaymentInput {
  create?: Maybe<OrderCreateWithoutPaymentInput>;
  update?: Maybe<OrderUpdateWithoutPaymentDataInput>;
  upsert?: Maybe<OrderUpsertWithoutPaymentInput>;
  connect?: Maybe<OrderWhereUniqueInput>;
}

export interface OrderUpdateWithoutPaymentDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutOrdersInput>;
  delivered?: Maybe<Boolean>;
  items?: Maybe<CartItemUpdateManyInput>;
  amount?: Maybe<Int>;
  orderDate?: Maybe<DateTimeInput>;
  deliverDate?: Maybe<DateTimeInput>;
  eta?: Maybe<DateTimeInput>;
  deliverTo?: Maybe<AddressUpdateOneRequiredInput>;
}

export interface OrderUpsertWithoutPaymentInput {
  update: OrderUpdateWithoutPaymentDataInput;
  create: OrderCreateWithoutPaymentInput;
}

export interface PaymentUpdateManyMutationInput {
  modeOfPayment?: Maybe<String>;
  payed?: Maybe<Boolean>;
  amount?: Maybe<Int>;
}

export interface ProductUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  imageuri?: Maybe<String>;
  category?: Maybe<CategoryUpdateOneRequiredInput>;
  tags?: Maybe<TagUpdateManyInput>;
  hsn?: Maybe<String>;
  variants?: Maybe<VariantUpdateManyWithoutProductInput>;
  supplier?: Maybe<SupplierUpdateOneRequiredInput>;
  company?: Maybe<CompanyUpdateOneRequiredInput>;
}

export interface ProductUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  imageuri?: Maybe<String>;
  hsn?: Maybe<String>;
}

export interface SupplierUpdateInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  gstin?: Maybe<String>;
}

export interface SupplierUpdateManyMutationInput {
  code?: Maybe<String>;
  name?: Maybe<String>;
  gstin?: Maybe<String>;
}

export interface TagUpdateInput {
  name?: Maybe<String>;
  search?: Maybe<String>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<String>;
  search?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  addresses?: Maybe<AddressUpdateManyWithoutUserInput>;
  cart?: Maybe<CartUpdateOneWithoutUserInput>;
  addnInfo?: Maybe<AddInfoUpdateOneWithoutUserInput>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface VariantUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
  product?: Maybe<ProductUpdateOneWithoutVariantsInput>;
}

export interface VariantUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Int>;
  pRate?: Maybe<Float>;
  taxType?: Maybe<Float>;
  stock?: Maybe<Int>;
}

export interface AddInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddInfoWhereInput>;
  AND?: Maybe<AddInfoSubscriptionWhereInput[] | AddInfoSubscriptionWhereInput>;
  OR?: Maybe<AddInfoSubscriptionWhereInput[] | AddInfoSubscriptionWhereInput>;
  NOT?: Maybe<AddInfoSubscriptionWhereInput[] | AddInfoSubscriptionWhereInput>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface CartSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartWhereInput>;
  AND?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  OR?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
  NOT?: Maybe<CartSubscriptionWhereInput[] | CartSubscriptionWhereInput>;
}

export interface CartItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CartItemWhereInput>;
  AND?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
  OR?: Maybe<CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput>;
  NOT?: Maybe<
    CartItemSubscriptionWhereInput[] | CartItemSubscriptionWhereInput
  >;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface PaymentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PaymentWhereInput>;
  AND?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  OR?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
  NOT?: Maybe<PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface SupplierSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SupplierWhereInput>;
  AND?: Maybe<
    SupplierSubscriptionWhereInput[] | SupplierSubscriptionWhereInput
  >;
  OR?: Maybe<SupplierSubscriptionWhereInput[] | SupplierSubscriptionWhereInput>;
  NOT?: Maybe<
    SupplierSubscriptionWhereInput[] | SupplierSubscriptionWhereInput
  >;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VariantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VariantWhereInput>;
  AND?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
  OR?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
  NOT?: Maybe<VariantSubscriptionWhereInput[] | VariantSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AddInfo {
  id: ID_Output;
  nickName: String;
}

export interface AddInfoPromise extends Promise<AddInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  nickName: () => Promise<String>;
}

export interface AddInfoSubscription
  extends Promise<AsyncIterator<AddInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  nickName: () => Promise<AsyncIterator<String>>;
}

export interface AddInfoNullablePromise
  extends Promise<AddInfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  nickName: () => Promise<String>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = CartPromise>() => T;
  addnInfo: <T = AddInfoPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  addresses: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = CartSubscription>() => T;
  addnInfo: <T = AddInfoSubscription>() => T;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  addresses: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  cart: <T = CartPromise>() => T;
  addnInfo: <T = AddInfoPromise>() => T;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Address {
  id: ID_Output;
  name: String;
  line1: String;
  line2?: String;
  district?: String;
  state?: String;
  pincode?: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  line1: () => Promise<String>;
  line2: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  line1: () => Promise<AsyncIterator<String>>;
  line2: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  line1: () => Promise<String>;
  line2: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
  user: <T = UserPromise>() => T;
}

export interface Cart {
  id: ID_Output;
}

export interface CartPromise extends Promise<Cart>, Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface CartSubscription
  extends Promise<AsyncIterator<Cart>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  items: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
}

export interface CartNullablePromise
  extends Promise<Cart | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
}

export interface CartItem {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPromise extends Promise<CartItem>, Fragmentable {
  id: () => Promise<ID_Output>;
  cart: <T = CartPromise>() => T;
  product: <T = ProductPromise>() => T;
  variant: <T = VariantPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface CartItemSubscription
  extends Promise<AsyncIterator<CartItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  cart: <T = CartSubscription>() => T;
  product: <T = ProductSubscription>() => T;
  variant: <T = VariantSubscription>() => T;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemNullablePromise
  extends Promise<CartItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  cart: <T = CartPromise>() => T;
  product: <T = ProductPromise>() => T;
  variant: <T = VariantPromise>() => T;
  quantity: () => Promise<Int>;
}

export interface Product {
  id: ID_Output;
  code: String;
  name: String;
  imageuri?: String;
  hsn?: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  imageuri: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hsn: () => Promise<String>;
  variants: <T = FragmentableArray<Variant>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = SupplierPromise>() => T;
  company: <T = CompanyPromise>() => T;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageuri: () => Promise<AsyncIterator<String>>;
  category: <T = CategorySubscription>() => T;
  tags: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hsn: () => Promise<AsyncIterator<String>>;
  variants: <T = Promise<AsyncIterator<VariantSubscription>>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = SupplierSubscription>() => T;
  company: <T = CompanySubscription>() => T;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  imageuri: () => Promise<String>;
  category: <T = CategoryPromise>() => T;
  tags: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  hsn: () => Promise<String>;
  variants: <T = FragmentableArray<Variant>>(args?: {
    where?: VariantWhereInput;
    orderBy?: VariantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  supplier: <T = SupplierPromise>() => T;
  company: <T = CompanyPromise>() => T;
}

export interface Category {
  id: ID_Output;
  name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface Tag {
  id: ID_Output;
  name: String;
  search: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  search: () => Promise<String>;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  search: () => Promise<AsyncIterator<String>>;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  search: () => Promise<String>;
}

export interface Variant {
  id: ID_Output;
  name: String;
  price?: Int;
  pRate?: Float;
  taxType?: Float;
  stock?: Int;
}

export interface VariantPromise extends Promise<Variant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  pRate: () => Promise<Float>;
  taxType: () => Promise<Float>;
  stock: () => Promise<Int>;
  product: <T = ProductPromise>() => T;
}

export interface VariantSubscription
  extends Promise<AsyncIterator<Variant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  pRate: () => Promise<AsyncIterator<Float>>;
  taxType: () => Promise<AsyncIterator<Float>>;
  stock: () => Promise<AsyncIterator<Int>>;
  product: <T = ProductSubscription>() => T;
}

export interface VariantNullablePromise
  extends Promise<Variant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  pRate: () => Promise<Float>;
  taxType: () => Promise<Float>;
  stock: () => Promise<Int>;
  product: <T = ProductPromise>() => T;
}

export interface Supplier {
  id: ID_Output;
  code: String;
  name: String;
  gstin?: String;
}

export interface SupplierPromise extends Promise<Supplier>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  gstin: () => Promise<String>;
}

export interface SupplierSubscription
  extends Promise<AsyncIterator<Supplier>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gstin: () => Promise<AsyncIterator<String>>;
}

export interface SupplierNullablePromise
  extends Promise<Supplier | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  gstin: () => Promise<String>;
}

export interface Company {
  id: ID_Output;
  name: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface Order {
  id: ID_Output;
  delivered: Boolean;
  amount: Int;
  orderDate: DateTimeOutput;
  deliverDate?: DateTimeOutput;
  eta?: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  delivered: () => Promise<Boolean>;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  amount: () => Promise<Int>;
  orderDate: () => Promise<DateTimeOutput>;
  deliverDate: () => Promise<DateTimeOutput>;
  eta: () => Promise<DateTimeOutput>;
  payment: <T = PaymentPromise>() => T;
  deliverTo: <T = AddressPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  delivered: () => Promise<AsyncIterator<Boolean>>;
  items: <T = Promise<AsyncIterator<CartItemSubscription>>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  amount: () => Promise<AsyncIterator<Int>>;
  orderDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliverDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  eta: () => Promise<AsyncIterator<DateTimeOutput>>;
  payment: <T = PaymentSubscription>() => T;
  deliverTo: <T = AddressSubscription>() => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  delivered: () => Promise<Boolean>;
  items: <T = FragmentableArray<CartItem>>(args?: {
    where?: CartItemWhereInput;
    orderBy?: CartItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  amount: () => Promise<Int>;
  orderDate: () => Promise<DateTimeOutput>;
  deliverDate: () => Promise<DateTimeOutput>;
  eta: () => Promise<DateTimeOutput>;
  payment: <T = PaymentPromise>() => T;
  deliverTo: <T = AddressPromise>() => T;
}

export interface Payment {
  id: ID_Output;
  modeOfPayment: String;
  payed: Boolean;
  amount: Int;
}

export interface PaymentPromise extends Promise<Payment>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  order: <T = OrderPromise>() => T;
  modeOfPayment: () => Promise<String>;
  payed: () => Promise<Boolean>;
  amount: () => Promise<Int>;
}

export interface PaymentSubscription
  extends Promise<AsyncIterator<Payment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  order: <T = OrderSubscription>() => T;
  modeOfPayment: () => Promise<AsyncIterator<String>>;
  payed: () => Promise<AsyncIterator<Boolean>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentNullablePromise
  extends Promise<Payment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  order: <T = OrderPromise>() => T;
  modeOfPayment: () => Promise<String>;
  payed: () => Promise<Boolean>;
  amount: () => Promise<Int>;
}

export interface AddInfoConnection {
  pageInfo: PageInfo;
  edges: AddInfoEdge[];
}

export interface AddInfoConnectionPromise
  extends Promise<AddInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddInfoEdge>>() => T;
  aggregate: <T = AggregateAddInfoPromise>() => T;
}

export interface AddInfoConnectionSubscription
  extends Promise<AsyncIterator<AddInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddInfoSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddInfoEdge {
  node: AddInfo;
  cursor: String;
}

export interface AddInfoEdgePromise extends Promise<AddInfoEdge>, Fragmentable {
  node: <T = AddInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddInfoEdgeSubscription
  extends Promise<AsyncIterator<AddInfoEdge>>,
    Fragmentable {
  node: <T = AddInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddInfo {
  count: Int;
}

export interface AggregateAddInfoPromise
  extends Promise<AggregateAddInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddInfoSubscription
  extends Promise<AsyncIterator<AggregateAddInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartConnection {
  pageInfo: PageInfo;
  edges: CartEdge[];
}

export interface CartConnectionPromise
  extends Promise<CartConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartEdge>>() => T;
  aggregate: <T = AggregateCartPromise>() => T;
}

export interface CartConnectionSubscription
  extends Promise<AsyncIterator<CartConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartSubscription>() => T;
}

export interface CartEdge {
  node: Cart;
  cursor: String;
}

export interface CartEdgePromise extends Promise<CartEdge>, Fragmentable {
  node: <T = CartPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartEdgeSubscription
  extends Promise<AsyncIterator<CartEdge>>,
    Fragmentable {
  node: <T = CartSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCart {
  count: Int;
}

export interface AggregateCartPromise
  extends Promise<AggregateCart>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartSubscription
  extends Promise<AsyncIterator<AggregateCart>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CartItemConnection {
  pageInfo: PageInfo;
  edges: CartItemEdge[];
}

export interface CartItemConnectionPromise
  extends Promise<CartItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CartItemEdge>>() => T;
  aggregate: <T = AggregateCartItemPromise>() => T;
}

export interface CartItemConnectionSubscription
  extends Promise<AsyncIterator<CartItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CartItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCartItemSubscription>() => T;
}

export interface CartItemEdge {
  node: CartItem;
  cursor: String;
}

export interface CartItemEdgePromise
  extends Promise<CartItemEdge>,
    Fragmentable {
  node: <T = CartItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CartItemEdgeSubscription
  extends Promise<AsyncIterator<CartItemEdge>>,
    Fragmentable {
  node: <T = CartItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCartItem {
  count: Int;
}

export interface AggregateCartItemPromise
  extends Promise<AggregateCartItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCartItemSubscription
  extends Promise<AsyncIterator<AggregateCartItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PaymentConnection {
  pageInfo: PageInfo;
  edges: PaymentEdge[];
}

export interface PaymentConnectionPromise
  extends Promise<PaymentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PaymentEdge>>() => T;
  aggregate: <T = AggregatePaymentPromise>() => T;
}

export interface PaymentConnectionSubscription
  extends Promise<AsyncIterator<PaymentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PaymentEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePaymentSubscription>() => T;
}

export interface PaymentEdge {
  node: Payment;
  cursor: String;
}

export interface PaymentEdgePromise extends Promise<PaymentEdge>, Fragmentable {
  node: <T = PaymentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PaymentEdgeSubscription
  extends Promise<AsyncIterator<PaymentEdge>>,
    Fragmentable {
  node: <T = PaymentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePayment {
  count: Int;
}

export interface AggregatePaymentPromise
  extends Promise<AggregatePayment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePaymentSubscription
  extends Promise<AsyncIterator<AggregatePayment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SupplierConnection {
  pageInfo: PageInfo;
  edges: SupplierEdge[];
}

export interface SupplierConnectionPromise
  extends Promise<SupplierConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SupplierEdge>>() => T;
  aggregate: <T = AggregateSupplierPromise>() => T;
}

export interface SupplierConnectionSubscription
  extends Promise<AsyncIterator<SupplierConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SupplierEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSupplierSubscription>() => T;
}

export interface SupplierEdge {
  node: Supplier;
  cursor: String;
}

export interface SupplierEdgePromise
  extends Promise<SupplierEdge>,
    Fragmentable {
  node: <T = SupplierPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SupplierEdgeSubscription
  extends Promise<AsyncIterator<SupplierEdge>>,
    Fragmentable {
  node: <T = SupplierSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSupplier {
  count: Int;
}

export interface AggregateSupplierPromise
  extends Promise<AggregateSupplier>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSupplierSubscription
  extends Promise<AsyncIterator<AggregateSupplier>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VariantConnection {
  pageInfo: PageInfo;
  edges: VariantEdge[];
}

export interface VariantConnectionPromise
  extends Promise<VariantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VariantEdge>>() => T;
  aggregate: <T = AggregateVariantPromise>() => T;
}

export interface VariantConnectionSubscription
  extends Promise<AsyncIterator<VariantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VariantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVariantSubscription>() => T;
}

export interface VariantEdge {
  node: Variant;
  cursor: String;
}

export interface VariantEdgePromise extends Promise<VariantEdge>, Fragmentable {
  node: <T = VariantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VariantEdgeSubscription
  extends Promise<AsyncIterator<VariantEdge>>,
    Fragmentable {
  node: <T = VariantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVariant {
  count: Int;
}

export interface AggregateVariantPromise
  extends Promise<AggregateVariant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVariantSubscription
  extends Promise<AsyncIterator<AggregateVariant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddInfoSubscriptionPayload {
  mutation: MutationType;
  node: AddInfo;
  updatedFields: String[];
  previousValues: AddInfoPreviousValues;
}

export interface AddInfoSubscriptionPayloadPromise
  extends Promise<AddInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddInfoPreviousValuesPromise>() => T;
}

export interface AddInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddInfoPreviousValuesSubscription>() => T;
}

export interface AddInfoPreviousValues {
  id: ID_Output;
  nickName: String;
}

export interface AddInfoPreviousValuesPromise
  extends Promise<AddInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nickName: () => Promise<String>;
}

export interface AddInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<AddInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nickName: () => Promise<AsyncIterator<String>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  name: String;
  line1: String;
  line2?: String;
  district?: String;
  state?: String;
  pincode?: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  line1: () => Promise<String>;
  line2: () => Promise<String>;
  district: () => Promise<String>;
  state: () => Promise<String>;
  pincode: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  line1: () => Promise<AsyncIterator<String>>;
  line2: () => Promise<AsyncIterator<String>>;
  district: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  pincode: () => Promise<AsyncIterator<String>>;
}

export interface CartSubscriptionPayload {
  mutation: MutationType;
  node: Cart;
  updatedFields: String[];
  previousValues: CartPreviousValues;
}

export interface CartSubscriptionPayloadPromise
  extends Promise<CartSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartPreviousValuesPromise>() => T;
}

export interface CartSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartPreviousValuesSubscription>() => T;
}

export interface CartPreviousValues {
  id: ID_Output;
}

export interface CartPreviousValuesPromise
  extends Promise<CartPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface CartPreviousValuesSubscription
  extends Promise<AsyncIterator<CartPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface CartItemSubscriptionPayload {
  mutation: MutationType;
  node: CartItem;
  updatedFields: String[];
  previousValues: CartItemPreviousValues;
}

export interface CartItemSubscriptionPayloadPromise
  extends Promise<CartItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CartItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CartItemPreviousValuesPromise>() => T;
}

export interface CartItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CartItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CartItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CartItemPreviousValuesSubscription>() => T;
}

export interface CartItemPreviousValues {
  id: ID_Output;
  quantity: Int;
}

export interface CartItemPreviousValuesPromise
  extends Promise<CartItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  quantity: () => Promise<Int>;
}

export interface CartItemPreviousValuesSubscription
  extends Promise<AsyncIterator<CartItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  quantity: () => Promise<AsyncIterator<Int>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  delivered: Boolean;
  amount: Int;
  orderDate: DateTimeOutput;
  deliverDate?: DateTimeOutput;
  eta?: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  delivered: () => Promise<Boolean>;
  amount: () => Promise<Int>;
  orderDate: () => Promise<DateTimeOutput>;
  deliverDate: () => Promise<DateTimeOutput>;
  eta: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  delivered: () => Promise<AsyncIterator<Boolean>>;
  amount: () => Promise<AsyncIterator<Int>>;
  orderDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  deliverDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  eta: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType;
  node: Payment;
  updatedFields: String[];
  previousValues: PaymentPreviousValues;
}

export interface PaymentSubscriptionPayloadPromise
  extends Promise<PaymentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PaymentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PaymentPreviousValuesPromise>() => T;
}

export interface PaymentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PaymentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PaymentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PaymentPreviousValuesSubscription>() => T;
}

export interface PaymentPreviousValues {
  id: ID_Output;
  modeOfPayment: String;
  payed: Boolean;
  amount: Int;
}

export interface PaymentPreviousValuesPromise
  extends Promise<PaymentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  modeOfPayment: () => Promise<String>;
  payed: () => Promise<Boolean>;
  amount: () => Promise<Int>;
}

export interface PaymentPreviousValuesSubscription
  extends Promise<AsyncIterator<PaymentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  modeOfPayment: () => Promise<AsyncIterator<String>>;
  payed: () => Promise<AsyncIterator<Boolean>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
  imageuri?: String;
  hsn?: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  imageuri: () => Promise<String>;
  hsn: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  imageuri: () => Promise<AsyncIterator<String>>;
  hsn: () => Promise<AsyncIterator<String>>;
}

export interface SupplierSubscriptionPayload {
  mutation: MutationType;
  node: Supplier;
  updatedFields: String[];
  previousValues: SupplierPreviousValues;
}

export interface SupplierSubscriptionPayloadPromise
  extends Promise<SupplierSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SupplierPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SupplierPreviousValuesPromise>() => T;
}

export interface SupplierSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SupplierSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SupplierSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SupplierPreviousValuesSubscription>() => T;
}

export interface SupplierPreviousValues {
  id: ID_Output;
  code: String;
  name: String;
  gstin?: String;
}

export interface SupplierPreviousValuesPromise
  extends Promise<SupplierPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  name: () => Promise<String>;
  gstin: () => Promise<String>;
}

export interface SupplierPreviousValuesSubscription
  extends Promise<AsyncIterator<SupplierPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  gstin: () => Promise<AsyncIterator<String>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  name: String;
  search: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  search: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  search: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface VariantSubscriptionPayload {
  mutation: MutationType;
  node: Variant;
  updatedFields: String[];
  previousValues: VariantPreviousValues;
}

export interface VariantSubscriptionPayloadPromise
  extends Promise<VariantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VariantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VariantPreviousValuesPromise>() => T;
}

export interface VariantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VariantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VariantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VariantPreviousValuesSubscription>() => T;
}

export interface VariantPreviousValues {
  id: ID_Output;
  name: String;
  price?: Int;
  pRate?: Float;
  taxType?: Float;
  stock?: Int;
}

export interface VariantPreviousValuesPromise
  extends Promise<VariantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Int>;
  pRate: () => Promise<Float>;
  taxType: () => Promise<Float>;
  stock: () => Promise<Int>;
}

export interface VariantPreviousValuesSubscription
  extends Promise<AsyncIterator<VariantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  pRate: () => Promise<AsyncIterator<Float>>;
  taxType: () => Promise<AsyncIterator<Float>>;
  stock: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Supplier",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Variant",
    embedded: false
  },
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  },
  {
    name: "Cart",
    embedded: false
  },
  {
    name: "CartItem",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Payment",
    embedded: false
  },
  {
    name: "AddInfo",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
